// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_App1_0_H
#define WINRT_App1_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::App1
{
    struct IMainWindow;
    struct MainWindow;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::App1::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::App1::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::App1::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::App1::MainWindow> = L"App1.MainWindow";
    template <> inline constexpr auto& name_v<winrt::App1::XamlMetaDataProvider> = L"App1.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::App1::IMainWindow> = L"App1.IMainWindow";
    template <> inline constexpr guid guid_v<winrt::App1::IMainWindow>{ 0x446D1A6D,0x73A4,0x5BAE,{ 0xA4,0xA2,0x6B,0x2A,0x28,0x46,0xFB,0x59 } }; // 446D1A6D-73A4-5BAE-A4A2-6B2A2846FB59
    template <> struct default_interface<winrt::App1::MainWindow>{ using type = winrt::App1::IMainWindow; };
    template <> struct default_interface<winrt::App1::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::App1::IMainWindow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_App1_IMainWindow
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::App1::IMainWindow>
    {
        template <typename D> using type = consume_App1_IMainWindow<D>;
    };
}
#endif
